(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

module.exports = function (data) {
  var fmt = d3.format('.3f');

  var scy = d3.scaleLinear().domain(data.yearDomain()).range([0, 250]);

  var scm = d3.scaleLinear().domain(data.monthDomain()).range([0, 100]);

  var scc = d3.scaleSequential(d3.interpolateYlOrRd).domain(data.varianceDomain());

  var mouseOver = function mouseOver() {
    box.attr('display', null);
  };

  var mouseMove = function mouseMove(d) {
    var x = Math.round(d3.event.layerX) + 90;
    var y = Math.round(d3.event.layerY) + 10;

    box.attr('transform', 'translate(' + x + ',' + y + ')');

    box.select('#d').text(d.year + ', ' + data.monthData()[d.month - 1][0]);

    box.select('#v').text(fmt(d.variance + data.baseTemperature()) + ' (' + fmt(d.variance) + ') Â°C');
  };

  var mouseOut = function mouseOut() {
    box.attr('display', 'none');
  };

  d3.select('#canvas').selectAll('g').data(data.yearData()).enter().selectAll('rect').data(function (d) {
    return d;
  }).enter().append('rect').on('mouseover', mouseOver).on('mousemove', mouseMove).on('mouseout', mouseOut).attr('x', function (d) {
    return scy(d.year);
  }).attr('y', function (d) {
    return scm(d.month);
  }).attr('width', 2).attr('height', 9).attr('style', function (d) {
    return 'fill: ' + scc(d.variance);
  });

  var box = d3.select('#box').attr('display', 'none');

  box.append('rect').attr('id', 'b').attr('width', 42).attr('height', 23);

  box.append('text').attr('id', 'd');

  box.append('text').attr('id', 'v');
};

},{}],2:[function(require,module,exports){
'use strict';

var res = function () {
  var url = 'https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/global-temperature.json';
  var data = void 0;
  var _baseTemperature = void 0;
  var _varianceDomain = void 0;
  var _monthDomain = void 0;
  var _yearDomain = void 0;

  return {
    do: function _do(f) {
      d3.json(url, function (error, res) {
        if (error) {
          console.log(res.status, res.responseText);
        } else {
          var actYear = 0;
          var thisYear = void 0;
          _baseTemperature = res.baseTemperature;
          _yearDomain = d3.extent(res.monthlyVariance, function (d) {
            return d.year;
          });
          _monthDomain = [1, 12];
          _varianceDomain = d3.extent(res.monthlyVariance, function (d) {
            return (d.variance + 1) / 2;
          });
          data = res.monthlyVariance.reduce(function (p, c) {
            if (actYear !== c.year) {
              actYear = c.year;
              p.push(thisYear = []);
            }
            thisYear.push(c);
            return p;
          }, []);
          f();
        }
      });
    },
    sel: function sel(fYear, fMonth) {
      fYear += 'y';
      return data[fYear][fMonth - 1];
    },
    baseTemperature: function baseTemperature() {
      return _baseTemperature;
    },
    varianceDomain: function varianceDomain() {
      return _varianceDomain;
    },
    monthDomain: function monthDomain() {
      return _monthDomain;
    },
    monthData: function monthData() {
      return [['January', 1], ['February', 2], ['March', 3], ['April', 4], ['May', 5], ['June', 6], ['July', 7], ['August', 8], ['September', 9], ['October', 10], ['November', 11], ['December', 12]];
    },
    yearDomain: function yearDomain() {
      return _yearDomain;
    },
    yearData: function yearData() {
      return data;
    }
  };
}();

module.exports = res;

},{}],3:[function(require,module,exports){
'use strict';

var data = require('./data.js');

data.do(function () {
  require('./yaxis.js')(data);
  require('./xaxis.js')(data);
  require('./canvas.js')(data);
});

},{"./canvas.js":1,"./data.js":2,"./xaxis.js":4,"./yaxis.js":5}],4:[function(require,module,exports){
'use strict';

module.exports = function (data) {
  var sc = d3.scaleLinear().domain(data.yearDomain()).range([0, 251]);

  var ax = d3.axisBottom(sc).tickFormat(d3.format('d'));

  d3.select('#bottomAxis').attr('transform', 'translate(83, 155)').attr('style', 'font-family: sans-serif; font-size: 5px').call(ax);
};

},{}],5:[function(require,module,exports){
'use strict';

module.exports = function (data) {
  var sc = d3.scaleLinear().domain(data.monthDomain()).range([0, 100]);

  var root = d3.select('#leftAxis').attr('transform', 'translate(0, 40)').attr('style', 'font-family: sans-serif; font-size: 5px').selectAll('g').data(data.monthData()).enter().append('g');

  root.append('text').attr('text-anchor', 'end').text(function (d) {
    return d[0];
  }).attr('y', function (d) {
    return sc(d[1]) + 6;
  }).attr('x', 78);
};

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
