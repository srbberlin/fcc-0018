(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

module.exports = function (data) {
  var svg = d3.select('svg').node();
  var canvas = d3.select('#canvas');
  var tooltip = d3.select('#tooltip');
  var fmt = d3.format('.3f');
  var scy = d3.scaleLinear().domain(data.yearDomain()).range([0, 250]);
  var scm = d3.scaleLinear().domain(data.monthDomain()).range([0, 100]);
  var scc = d3.scaleSequential(d3.interpolateYlOrRd).domain(data.varianceDomain());

  var mouseOver = function mouseOver() {
    tooltip.attr('display', null);
  };

  var mouseMove = function mouseMove(d) {
    var point = svg.createSVGPoint();
    point.x = d3.event.clientX;
    point.y = d3.event.clientY;
    point = point.matrixTransform(svg.getScreenCTM().inverse());
    tooltip.attr('transform', 'translate(' + (point.x + 5) + ',' + (point.y + 5) + ')').attr('data-year', d.year);
    tooltip.select('#d').text(d.year + ', ' + data.monthData()[d.month - 1]);
    tooltip.select('#v').text(fmt(d.variance + data.baseTemperature()) + ' (' + fmt(d.variance) + ') °C');
  };

  var mouseOut = function mouseOut() {
    tooltip.attr('display', 'none');
  };

  canvas.selectAll('g').data(data.yearData()).enter().selectAll('rect').data(function (d) {
    return d;
  }).enter().append('rect').on('mouseover', mouseOver).on('mousemove', mouseMove).on('mouseout', mouseOut).attr('class', 'cell').attr('x', function (d) {
    return scy(d.year);
  }).attr('y', function (d) {
    return scm(d.month);
  }).attr('width', 2).attr('height', 9).attr('style', function (d) {
    return 'fill: ' + scc(d.variance);
  }).attr('data-year', function (d) {
    return d.year;
  }).attr('data-month', function (d) {
    return d.month - 1;
  }).attr('data-temp', function (d) {
    return d.temp;
  });
  tooltip.attr('display', 'none');
  tooltip.append('rect').attr('id', 'b').attr('width', 42).attr('height', 23);
  tooltip.append('text').attr('id', 'd');
  tooltip.append('text').attr('id', 'v');
};

},{}],2:[function(require,module,exports){
"use strict";

var res = function () {
  var url = 'https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/global-temperature.json';
  var data;

  var _baseTemperature;

  var _varianceDomain;

  var _varianceData;

  var step;
  var pos;

  var _monthDomain;

  var _yearDomain;

  return {
    do: function _do(f) {
      d3.json(url, function (error, res) {
        if (error) {
          console.log(res.status, res.responseText);
        } else {
          var actYear = 0;
          var thisYear;
          _baseTemperature = res.baseTemperature;
          _yearDomain = d3.extent(res.monthlyVariance, function (d) {
            return d.year;
          });
          _monthDomain = [1, 12];
          _varianceDomain = d3.extent(res.monthlyVariance, function (d) {
            return d.variance;
          });
          step = (_varianceDomain[1] - _varianceDomain[0]) / 5;
          pos = _varianceDomain[0];
          _varianceData = [0, 0, 0, 0, 0].map(function (d, i) {
            var j = i * step + pos;
            return {
              v: j,
              i: i,
              t: _baseTemperature + j
            };
          });
          data = res.monthlyVariance.reduce(function (p, c) {
            if (actYear !== c.year) {
              actYear = c.year;
              p.push(thisYear = []);
            }

            c.temp = _baseTemperature + c.variance;
            thisYear.push(c);
            return p;
          }, []);
          f();
        }
      });
    },
    sel: function sel(fYear, fMonth) {
      fYear += 'y';
      return data[fYear][fMonth - 1];
    },
    baseTemperature: function baseTemperature() {
      return _baseTemperature;
    },
    varianceDomain: function varianceDomain() {
      return _varianceDomain;
    },
    varianceData: function varianceData() {
      return _varianceData;
    },
    monthDomain: function monthDomain() {
      return _monthDomain;
    },
    monthData: function monthData() {
      return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    },
    yearDomain: function yearDomain() {
      return _yearDomain;
    },
    yearData: function yearData() {
      return data;
    }
  };
}();

module.exports = res;

},{}],3:[function(require,module,exports){
"use strict";

var data = require('./data.js');

data.do(function () {
  require('./yaxis.js')(data);

  require('./xaxis.js')(data);

  require('./canvas.js')(data);

  require('./legend.js')(data);
});

},{"./canvas.js":1,"./data.js":2,"./legend.js":4,"./xaxis.js":5,"./yaxis.js":6}],4:[function(require,module,exports){
"use strict";

module.exports = function (data) {
  var scc = d3.scaleSequential(d3.interpolateYlOrRd).domain(data.varianceDomain());
  var legend = d3.select('#legend');
  var form = d3.format('.3f');
  var step = 55;
  var pos = -135;
  var height = 12;
  legend.append('g').selectAll('rect').data(data.varianceData).enter().append('rect').attr('transform', function (d) {
    return "translate(".concat(pos + d.i * step, ",0)");
  }).attr('style', function (d) {
    return 'fill: ' + scc(d.v);
  }).attr('width', step).attr('height', height);
  legend.append('g').selectAll('text').data(data.varianceData).enter().append('text').attr('class', 'c3').text(function (d) {
    return "".concat(form(d.t), " (").concat(form(d.v), ")");
  }).attr('transform', function (d) {
    return "translate(".concat(pos + 4 + d.i * step, ", 9)");
  });
  legend.append('text').attr('class', 'c9').text('Temperatures are in Celsius. Anomalies relative to the Jan 1951-Dec 1980 average are in braces.');
  legend.append('text').attr('class', 'c10').text('Estimated Jan 1951-Dec 1980 absolute temperature in ℃: 8.66 +/- 0.07');
};

},{}],5:[function(require,module,exports){
"use strict";

module.exports = function (data) {
  var sc = d3.scaleLinear().domain(data.yearDomain()).range([0, 251]);
  var ax = d3.axisBottom(sc).tickFormat(d3.format('d'));
  d3.select('#x-axis').attr('transform', 'translate(83, 155)').call(ax);
};

},{}],6:[function(require,module,exports){
"use strict";

module.exports = function (data) {
  var sc = d3.scaleOrdinal().domain(data.monthData()).range([0, 9.1, 17.2, 26.3, 35.4, 44.5, 53.6, 62.7, 71.8, 80.9, 90, 100]);
  var ax = d3.axisLeft(sc);
  d3.select('#y-axis').attr('transform', 'translate(76, 45)').call(ax);
};

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
